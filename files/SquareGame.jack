// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/09/Square/SquareGame.jack

/**
 * The SquareDance class implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beggining, the square is located at the top left corner.
 * Use the arrow keys to move the square.
 * Use 'z' & 'x' to decrement & increment the size.
 * Use 'q' to quit.
 */
class SquareGame {

    // The square
    field Square square;
    field Square boom;
    field Square rand;    
    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right

    /** Constructs a new Square Game. */
    constructor SquareGame new() {
        let rand = 0;
        let square = Square.new(0, 0, 30);
        let boom = Square.new(480, rand, 30);

        let direction = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do boom.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that controls
     *  the square movement direction and size. */
    method void run() {
        var char key;
        var boolean exit;
        var int bplace;
        var int splace;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.

            let key = Keyboard.keyPressed();
            do moveSquare();


            if (key = 81) {
                let exit = true;
            }
            if (key = 90) {
                do square.decSize();
            }
            if (key = 88) {
                do square.incSize();
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

            // waits for the key to be released.
            if (~(key = 0)) {
                let rand = rand+key; 
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
            let direction = 0;

            do moveBooms();
            
            let bplace = boom.getX() - square.getX();
            let splace = boom.getY() - square.getY();

            if(bplace < 0){
                let bplace = bplace*-1;
            }
            if(splace < 0){
                let splace = splace*-1;
            }

            if(( bplace - 30 ) < 0 & ( splace - 30 ) < 0){
                let exit = true;
            }

            let bplace = boom.getX();
            if(bplace = 0){
                do resetBooms();
            }

            do Sys.wait(5); // Delays the next movement.
        }
            
        return;
	}

    /** Moves the square by 2 in the current direction. */
    method void moveSquare() {
        var boolean w;
        if (direction = 1) {
            do square.moveUp();
        }
        if (direction = 2) {
            do square.moveDown();
        }
        if (direction = 3) {
            do square.moveLeft();
        }
        if (direction = 4) {
            let w = square.moveRight();
        }


        return;
    }

    method void moveBooms() {
        do boom.moveLeft();
        return;
    }
    method void resetBooms() {
        while(rand > 224){
            let rand = rand/4;
        }
        do boom.erase();
        do boom.dispose();
        let boom = Square.new(480, rand, 30);
        return;
    }
}
